"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRpc = exports.isJsonRpcRequest = void 0;
/**
 * Type guard to check if a given object is a valid JSON-RPC request.
 */
function isJsonRpcRequest(req) {
    if (req.jsonrpc !== "2.0")
        return false;
    if (typeof req.method !== "string")
        return false;
    if (!Array.isArray(req.params))
        return false;
    return true;
}
exports.isJsonRpcRequest = isJsonRpcRequest;
/**
 * Type guard to check if an object has a certain property.
 */
function hasProperty(obj, prop) {
    return typeof obj === "object" && obj !== null && prop in obj;
}
/**
 * Type guard to check if an object has a certain method.
 */
function hasMethod(obj, prop) {
    return hasProperty(obj, prop) && typeof obj[prop] === "function";
}
function getErrorCode(err) {
    if (hasProperty(err, "code") && typeof err.code === "number") {
        return err.code;
    }
    return -32000;
}
function getErrorMessage(err) {
    if (hasProperty(err, "message") && typeof err.message === "string") {
        return err.message;
    }
    return "";
}
/**
 * Returns the id or null if there is no valid id.
 */
function getRequestId(req) {
    if (hasProperty(req, "id")) {
        const id = req.id;
        if (typeof id === "string" || typeof id === "number")
            return id;
    }
    return null;
}
async function handleRpc(request, service) {
    const id = getRequestId(request);
    if (!isJsonRpcRequest(request)) {
        //The JSON sent is not a valid Request object
        return {
            jsonrpc: "2.0",
            id,
            error: { code: -32600, message: "Invalid Request" },
        };
    }
    const { jsonrpc, method, params } = request;
    if (!hasMethod(service, method)) {
        console.log("Method %s not found", method, service);
        return {
            jsonrpc,
            id,
            error: { code: -32601, message: `Method not found: ${method}` },
        };
    }
    try {
        const result = await service[method](...params);
        return { jsonrpc, id, result };
    }
    catch (err) {
        return {
            jsonrpc,
            id,
            error: {
                code: getErrorCode(err),
                message: getErrorMessage(err),
            },
        };
    }
}
exports.handleRpc = handleRpc;
//# sourceMappingURL=server.js.map