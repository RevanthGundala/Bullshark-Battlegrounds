"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("isomorphic-fetch");
const tap_1 = __importDefault(require("tap"));
const client_js_1 = require("../client.js");
const url = process.env.SERVER_URL + "/api";
tap_1.default.test("should talk to the server", async (t) => {
    const client = (0, client_js_1.rpcClient)(url);
    const result = await client.hello("world");
    t.equal(result, "Hello world!");
});
tap_1.default.test("should omit trailing undefined params", async (t) => {
    const client = (0, client_js_1.rpcClient)({ url });
    const result = await client.greet("hello", undefined);
    t.equal(result, "hello world!");
});
tap_1.default.test("should override headers", async (t) => {
    const client = (0, client_js_1.rpcClient)({
        url,
        getHeaders() {
            return {
                "Prefer-Status": "400",
            };
        },
    });
    const promise = client.hello("world");
    t.rejects(promise, new client_js_1.RpcError("Bad Request", 400));
});
tap_1.default.test("should echo headers", async (t) => {
    const client = (0, client_js_1.rpcClient)({
        url: process.env.SERVER_URL + "/request-aware-api",
        getHeaders() {
            return {
                "X-Hello": "world",
            };
        },
    });
    const res = await client.echoHeader("X-Hello");
    t.equal(res, "world");
});
tap_1.default.test("should throw on errors", async (t) => {
    const client = (0, client_js_1.rpcClient)({ url });
    const promise = client.sorry("Dave");
    t.rejects(promise, new client_js_1.RpcError("Sorry Dave.", -32000));
});
tap_1.default.test("should support custom transports", async (t) => {
    const client = (0, client_js_1.rpcClient)({
        transport: async (req) => {
            return {
                jsonrpc: "2.0",
                result: "Custom!",
            };
        },
    });
    const result = await client.hello("world");
    t.equal(result, "Custom!");
});
//# sourceMappingURL=client.js.map