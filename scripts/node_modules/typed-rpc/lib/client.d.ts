import { JsonRpcRequest, JsonRpcResponse } from "./types";
/**
 * Error class that is thrown if a remote method returns an error.
 */
export declare class RpcError extends Error {
    code: number;
    data?: unknown;
    constructor(message: string, code: number, data?: unknown);
}
/**
 * Interface for custom transports. Implementations are expected to serialize
 * the given request and return an object that is a JsonRpcResponse.
 */
export type RpcTransport = (req: JsonRpcRequest) => Promise<JsonRpcResponse>;
type RpcClientOptions = string | FetchOptions | {
    transport: RpcTransport;
};
type FetchOptions = {
    url: string;
    credentials?: RequestCredentials;
    getHeaders?(): Record<string, string> | Promise<Record<string, string>> | undefined;
};
type Promisify<T> = T extends (...args: any[]) => Promise<any> ? T : T extends (...args: infer A) => infer R ? (...args: A) => Promise<R> : T;
type PromisifyMethods<T extends object> = {
    [K in keyof T]: Promisify<T[K]>;
};
export declare function rpcClient<T extends object>(options: RpcClientOptions): PromisifyMethods<T>;
/**
 * Create a JsonRpcRequest for the given method.
 */
export declare function createRequest(method: string, params: any[]): JsonRpcRequest;
/**
 * Returns a shallow copy the given array without any
 * trailing `undefined` values.
 */
export declare function removeTrailingUndefs(values: any[]): any[];
/**
 * Create a RpcTransport that uses the global fetch.
 */
export declare function fetchTransport(options: FetchOptions): RpcTransport;
export {};
