import { JsonRpcRequest, JsonRpcErrorResponse, JsonRpcSuccessResponse } from "./types";
/**
 * Type guard to check if a given object is a valid JSON-RPC request.
 */
export declare function isJsonRpcRequest(req: any): req is JsonRpcRequest;
/**
 * Valid RPC return types that can be serialized.
 */
export type RpcResult = string | number | boolean | null | undefined | void | RpcResult[] | {
    [key: string]: RpcResult;
};
/**
 * Signature that all RPC methods must adhere to.
 */
export type RpcMethod = (...args: any[]) => RpcResult | Promise<RpcResult>;
/**
 * Conditional type to verify a given type is a valid RPC method.
 */
type ValidMethod<T> = T extends RpcMethod ? T : never;
/**
 * Conditional type to verify that a function is also a valid RPC method.
 */
type RpcServiceProp<T> = T extends (...args: any) => any ? ValidMethod<T> : T;
/**
 * Type for RPC services that makes sure that all return values can
 * be serialized.
 */
export type RpcService<T> = {
    [K in keyof T]: RpcServiceProp<T[K]>;
};
export declare function handleRpc<T extends RpcService<T>>(request: JsonRpcRequest, service: T): Promise<JsonRpcErrorResponse | JsonRpcSuccessResponse>;
export {};
