{"message":"the trait bound `num_bigint::bigint::BigInt: From<[{integer}; 1]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":747,"byte_end":750,"line_start":24,"line_end":24,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"    builder.push_input(\"hand_card_ids\", [1]);","highlight_start":41,"highlight_end":44}],"label":"the trait `From<[{integer}; 1]>` is not implemented for `num_bigint::bigint::BigInt`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":719,"byte_end":729,"line_start":24,"line_end":24,"column_start":13,"column_end":23,"is_primary":false,"text":[{"text":"    builder.push_input(\"hand_card_ids\", [1]);","highlight_start":13,"highlight_end":23}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `From<T>`:\n  <num_bigint::bigint::BigInt as From<i128>>\n  <num_bigint::bigint::BigInt as From<i16>>\n  <num_bigint::bigint::BigInt as From<i32>>\n  <num_bigint::bigint::BigInt as From<i64>>\n  <num_bigint::bigint::BigInt as From<i8>>\n  <num_bigint::bigint::BigInt as From<isize>>\n  <num_bigint::bigint::BigInt as From<num_bigint::biguint::BigUint>>\n  <num_bigint::bigint::BigInt as From<u128>>\nand 5 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `[{integer}; 1]` to implement `Into<num_bigint::bigint::BigInt>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CircomBuilder::<E>::push_input`","code":null,"level":"note","spans":[{"file_name":"/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-circom-0.1.0/src/circom/builder.rs","byte_start":1322,"byte_end":1334,"line_start":50,"line_end":50,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"    pub fn push_input<T: Into<BigInt>>(&mut self, name: impl ToString, val: T) {","highlight_start":26,"highlight_end":38}],"label":"required by this bound in `CircomBuilder::<E>::push_input`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `num_bigint::bigint::BigInt: From<[{integer}; 1]>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:24:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    builder.push_input(\"hand_card_ids\", [1]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<[{integer}; 1]>` is not implemented for `num_bigint::bigint::BigInt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i128>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i16>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i32>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i64>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i8>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<isize>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<num_bigint::biguint::BigUint>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<u128>>\u001b[0m\n\u001b[0m           and 5 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `[{integer}; 1]` to implement `Into<num_bigint::bigint::BigInt>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CircomBuilder::<E>::push_input`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-circom-0.1.0/src/circom/builder.rs:50:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn push_input<T: Into<BigInt>>(&mut self, name: impl ToString, val: T) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CircomBuilder::<E>::push_input`\u001b[0m\n\n"}
{"message":"the trait bound `num_bigint::bigint::BigInt: From<[{integer}; 1]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":832,"byte_end":835,"line_start":26,"line_end":26,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"    builder.push_input(\"deck_card_ids\", [1]);","highlight_start":41,"highlight_end":44}],"label":"the trait `From<[{integer}; 1]>` is not implemented for `num_bigint::bigint::BigInt`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":804,"byte_end":814,"line_start":26,"line_end":26,"column_start":13,"column_end":23,"is_primary":false,"text":[{"text":"    builder.push_input(\"deck_card_ids\", [1]);","highlight_start":13,"highlight_end":23}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `From<T>`:\n  <num_bigint::bigint::BigInt as From<i128>>\n  <num_bigint::bigint::BigInt as From<i16>>\n  <num_bigint::bigint::BigInt as From<i32>>\n  <num_bigint::bigint::BigInt as From<i64>>\n  <num_bigint::bigint::BigInt as From<i8>>\n  <num_bigint::bigint::BigInt as From<isize>>\n  <num_bigint::bigint::BigInt as From<num_bigint::biguint::BigUint>>\n  <num_bigint::bigint::BigInt as From<u128>>\nand 5 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `[{integer}; 1]` to implement `Into<num_bigint::bigint::BigInt>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CircomBuilder::<E>::push_input`","code":null,"level":"note","spans":[{"file_name":"/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-circom-0.1.0/src/circom/builder.rs","byte_start":1322,"byte_end":1334,"line_start":50,"line_end":50,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"    pub fn push_input<T: Into<BigInt>>(&mut self, name: impl ToString, val: T) {","highlight_start":26,"highlight_end":38}],"label":"required by this bound in `CircomBuilder::<E>::push_input`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `num_bigint::bigint::BigInt: From<[{integer}; 1]>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:26:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    builder.push_input(\"deck_card_ids\", [1]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<[{integer}; 1]>` is not implemented for `num_bigint::bigint::BigInt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i128>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i16>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i32>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i64>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i8>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<isize>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<num_bigint::biguint::BigUint>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<u128>>\u001b[0m\n\u001b[0m           and 5 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `[{integer}; 1]` to implement `Into<num_bigint::bigint::BigInt>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CircomBuilder::<E>::push_input`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-circom-0.1.0/src/circom/builder.rs:50:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn push_input<T: Into<BigInt>>(&mut self, name: impl ToString, val: T) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CircomBuilder::<E>::push_input`\u001b[0m\n\n"}
{"message":"the trait bound `num_bigint::bigint::BigInt: From<[{integer}; 1]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":971,"byte_end":974,"line_start":29,"line_end":29,"column_start":47,"column_end":50,"is_primary":true,"text":[{"text":"    builder.push_input(\"hand_card_id_hashes\", [1]);","highlight_start":47,"highlight_end":50}],"label":"the trait `From<[{integer}; 1]>` is not implemented for `num_bigint::bigint::BigInt`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":937,"byte_end":947,"line_start":29,"line_end":29,"column_start":13,"column_end":23,"is_primary":false,"text":[{"text":"    builder.push_input(\"hand_card_id_hashes\", [1]);","highlight_start":13,"highlight_end":23}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `From<T>`:\n  <num_bigint::bigint::BigInt as From<i128>>\n  <num_bigint::bigint::BigInt as From<i16>>\n  <num_bigint::bigint::BigInt as From<i32>>\n  <num_bigint::bigint::BigInt as From<i64>>\n  <num_bigint::bigint::BigInt as From<i8>>\n  <num_bigint::bigint::BigInt as From<isize>>\n  <num_bigint::bigint::BigInt as From<num_bigint::biguint::BigUint>>\n  <num_bigint::bigint::BigInt as From<u128>>\nand 5 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `[{integer}; 1]` to implement `Into<num_bigint::bigint::BigInt>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CircomBuilder::<E>::push_input`","code":null,"level":"note","spans":[{"file_name":"/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-circom-0.1.0/src/circom/builder.rs","byte_start":1322,"byte_end":1334,"line_start":50,"line_end":50,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"    pub fn push_input<T: Into<BigInt>>(&mut self, name: impl ToString, val: T) {","highlight_start":26,"highlight_end":38}],"label":"required by this bound in `CircomBuilder::<E>::push_input`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `num_bigint::bigint::BigInt: From<[{integer}; 1]>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    builder.push_input(\"hand_card_id_hashes\", [1]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<[{integer}; 1]>` is not implemented for `num_bigint::bigint::BigInt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i128>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i16>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i32>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i64>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i8>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<isize>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<num_bigint::biguint::BigUint>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<u128>>\u001b[0m\n\u001b[0m           and 5 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `[{integer}; 1]` to implement `Into<num_bigint::bigint::BigInt>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CircomBuilder::<E>::push_input`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-circom-0.1.0/src/circom/builder.rs:50:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn push_input<T: Into<BigInt>>(&mut self, name: impl ToString, val: T) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CircomBuilder::<E>::push_input`\u001b[0m\n\n"}
{"message":"the trait bound `num_bigint::bigint::BigInt: From<[{integer}; 1]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1112,"byte_end":1115,"line_start":32,"line_end":32,"column_start":47,"column_end":50,"is_primary":true,"text":[{"text":"    builder.push_input(\"deck_card_id_hashes\", [1]);","highlight_start":47,"highlight_end":50}],"label":"the trait `From<[{integer}; 1]>` is not implemented for `num_bigint::bigint::BigInt`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1078,"byte_end":1088,"line_start":32,"line_end":32,"column_start":13,"column_end":23,"is_primary":false,"text":[{"text":"    builder.push_input(\"deck_card_id_hashes\", [1]);","highlight_start":13,"highlight_end":23}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `From<T>`:\n  <num_bigint::bigint::BigInt as From<i128>>\n  <num_bigint::bigint::BigInt as From<i16>>\n  <num_bigint::bigint::BigInt as From<i32>>\n  <num_bigint::bigint::BigInt as From<i64>>\n  <num_bigint::bigint::BigInt as From<i8>>\n  <num_bigint::bigint::BigInt as From<isize>>\n  <num_bigint::bigint::BigInt as From<num_bigint::biguint::BigUint>>\n  <num_bigint::bigint::BigInt as From<u128>>\nand 5 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `[{integer}; 1]` to implement `Into<num_bigint::bigint::BigInt>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `CircomBuilder::<E>::push_input`","code":null,"level":"note","spans":[{"file_name":"/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-circom-0.1.0/src/circom/builder.rs","byte_start":1322,"byte_end":1334,"line_start":50,"line_end":50,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"    pub fn push_input<T: Into<BigInt>>(&mut self, name: impl ToString, val: T) {","highlight_start":26,"highlight_end":38}],"label":"required by this bound in `CircomBuilder::<E>::push_input`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `num_bigint::bigint::BigInt: From<[{integer}; 1]>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:32:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    builder.push_input(\"deck_card_id_hashes\", [1]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<[{integer}; 1]>` is not implemented for `num_bigint::bigint::BigInt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i128>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i16>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i32>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i64>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<i8>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<isize>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<num_bigint::biguint::BigUint>>\u001b[0m\n\u001b[0m             <num_bigint::bigint::BigInt as From<u128>>\u001b[0m\n\u001b[0m           and 5 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `[{integer}; 1]` to implement `Into<num_bigint::bigint::BigInt>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `CircomBuilder::<E>::push_input`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-circom-0.1.0/src/circom/builder.rs:50:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn push_input<T: Into<BigInt>>(&mut self, name: impl ToString, val: T) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CircomBuilder::<E>::push_input`\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
