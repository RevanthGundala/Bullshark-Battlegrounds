{"message":"the trait bound `u8: rand_core::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1267,"byte_end":1275,"line_start":38,"line_end":38,"column_start":77,"column_end":85,"is_primary":true,"text":[{"text":"        Groth16::<Bn254>::generate_random_parameters_with_reduction(circom, &mut rng).unwrap();","highlight_start":77,"highlight_end":85}],"label":"the trait `rand_core::RngCore` is not implemented for `u8`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":1199,"byte_end":1258,"line_start":38,"line_end":38,"column_start":9,"column_end":68,"is_primary":false,"text":[{"text":"        Groth16::<Bn254>::generate_random_parameters_with_reduction(circom, &mut rng).unwrap();","highlight_start":9,"highlight_end":68}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `rand_core::RngCore`:\n  &'a mut R\n  Box<R>\n  rand::rngs::adapter::read::ReadRng<R>\n  rand::rngs::adapter::reseeding::ReseedingRng<R, Rsdr>\n  rand::rngs::mock::StepRng\n  rand::rngs::std::StdRng\n  rand::rngs::thread::ThreadRng\n  rand_chacha::chacha::ChaCha12Rng\nand 5 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `u8` to implement `rand::rng::Rng`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `generator::<impl Groth16<E, QAP>>::generate_random_parameters_with_reduction`","code":null,"level":"note","spans":[{"file_name":"/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-groth16-0.4.0/src/generator.rs","byte_start":733,"byte_end":774,"line_start":19,"line_end":19,"column_start":12,"column_end":53,"is_primary":false,"text":[{"text":"    pub fn generate_random_parameters_with_reduction<C>(","highlight_start":12,"highlight_end":53}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-groth16-0.4.0/src/generator.rs","byte_start":822,"byte_end":825,"line_start":21,"line_end":21,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        rng: &mut impl Rng,","highlight_start":24,"highlight_end":27}],"label":"required by this bound in `generator::<impl Groth16<E, QAP>>::generate_random_parameters_with_reduction`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u8: rand_core::RngCore` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:38:77\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Groth16::<Bn254>::generate_random_parameters_with_reduction(circom, &mut rng).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `rand_core::RngCore` is not implemented for `u8`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `rand_core::RngCore`:\u001b[0m\n\u001b[0m             &'a mut R\u001b[0m\n\u001b[0m             Box<R>\u001b[0m\n\u001b[0m             rand::rngs::adapter::read::ReadRng<R>\u001b[0m\n\u001b[0m             rand::rngs::adapter::reseeding::ReseedingRng<R, Rsdr>\u001b[0m\n\u001b[0m             rand::rngs::mock::StepRng\u001b[0m\n\u001b[0m             rand::rngs::std::StdRng\u001b[0m\n\u001b[0m             rand::rngs::thread::ThreadRng\u001b[0m\n\u001b[0m             rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m           and 5 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `u8` to implement `rand::rng::Rng`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `generator::<impl Groth16<E, QAP>>::generate_random_parameters_with_reduction`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-groth16-0.4.0/src/generator.rs:21:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn generate_random_parameters_with_reduction<C>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        circuit: C,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        rng: &mut impl Rng,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `generator::<impl Groth16<E, QAP>>::generate_random_parameters_with_reduction`\u001b[0m\n\n"}
{"message":"the trait bound `u8: rand_core::RngCore` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1532,"byte_end":1540,"line_start":46,"line_end":46,"column_start":58,"column_end":66,"is_primary":true,"text":[{"text":"    let proof = Groth16::<Bn254>::prove(&params, circom, &mut rng).unwrap();","highlight_start":58,"highlight_end":66}],"label":"the trait `rand_core::RngCore` is not implemented for `u8`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":1491,"byte_end":1514,"line_start":46,"line_end":46,"column_start":17,"column_end":40,"is_primary":false,"text":[{"text":"    let proof = Groth16::<Bn254>::prove(&params, circom, &mut rng).unwrap();","highlight_start":17,"highlight_end":40}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `rand_core::RngCore`:\n  &'a mut R\n  Box<R>\n  rand::rngs::adapter::read::ReadRng<R>\n  rand::rngs::adapter::reseeding::ReseedingRng<R, Rsdr>\n  rand::rngs::mock::StepRng\n  rand::rngs::std::StdRng\n  rand::rngs::thread::ThreadRng\n  rand_chacha::chacha::ChaCha12Rng\nand 5 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `prove`","code":null,"level":"note","spans":[{"file_name":"/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-snark-0.4.0/src/lib.rs","byte_start":1792,"byte_end":1799,"line_start":48,"line_end":48,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"    fn prove<C: ConstraintSynthesizer<F>, R: RngCore + CryptoRng>(","highlight_start":46,"highlight_end":53}],"label":"required by this bound in `SNARK::prove`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u8: rand_core::RngCore` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:46:58\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let proof = Groth16::<Bn254>::prove(&params, circom, &mut rng).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `rand_core::RngCore` is not implemented for `u8`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `rand_core::RngCore`:\u001b[0m\n\u001b[0m             &'a mut R\u001b[0m\n\u001b[0m             Box<R>\u001b[0m\n\u001b[0m             rand::rngs::adapter::read::ReadRng<R>\u001b[0m\n\u001b[0m             rand::rngs::adapter::reseeding::ReseedingRng<R, Rsdr>\u001b[0m\n\u001b[0m             rand::rngs::mock::StepRng\u001b[0m\n\u001b[0m             rand::rngs::std::StdRng\u001b[0m\n\u001b[0m             rand::rngs::thread::ThreadRng\u001b[0m\n\u001b[0m             rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m           and 5 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `prove`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-snark-0.4.0/src/lib.rs:48:46\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn prove<C: ConstraintSynthesizer<F>, R: RngCore + CryptoRng>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `SNARK::prove`\u001b[0m\n\n"}
{"message":"the trait bound `u8: rand_core::CryptoRng` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1532,"byte_end":1540,"line_start":46,"line_end":46,"column_start":58,"column_end":66,"is_primary":true,"text":[{"text":"    let proof = Groth16::<Bn254>::prove(&params, circom, &mut rng).unwrap();","highlight_start":58,"highlight_end":66}],"label":"the trait `rand_core::CryptoRng` is not implemented for `u8`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":1491,"byte_end":1514,"line_start":46,"line_end":46,"column_start":17,"column_end":40,"is_primary":false,"text":[{"text":"    let proof = Groth16::<Bn254>::prove(&params, circom, &mut rng).unwrap();","highlight_start":17,"highlight_end":40}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `rand_core::CryptoRng`:\n  &'a mut R\n  Box<R>\n  rand::rngs::adapter::reseeding::ReseedingRng<R, Rsdr>\n  rand::rngs::std::StdRng\n  rand::rngs::thread::ThreadRng\n  rand_chacha::chacha::ChaCha12Core\n  rand_chacha::chacha::ChaCha12Rng\n  rand_chacha::chacha::ChaCha20Core\nand 5 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `prove`","code":null,"level":"note","spans":[{"file_name":"/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-snark-0.4.0/src/lib.rs","byte_start":1802,"byte_end":1811,"line_start":48,"line_end":48,"column_start":56,"column_end":65,"is_primary":true,"text":[{"text":"    fn prove<C: ConstraintSynthesizer<F>, R: RngCore + CryptoRng>(","highlight_start":56,"highlight_end":65}],"label":"required by this bound in `SNARK::prove`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u8: rand_core::CryptoRng` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:46:58\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let proof = Groth16::<Bn254>::prove(&params, circom, &mut rng).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `rand_core::CryptoRng` is not implemented for `u8`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `rand_core::CryptoRng`:\u001b[0m\n\u001b[0m             &'a mut R\u001b[0m\n\u001b[0m             Box<R>\u001b[0m\n\u001b[0m             rand::rngs::adapter::reseeding::ReseedingRng<R, Rsdr>\u001b[0m\n\u001b[0m             rand::rngs::std::StdRng\u001b[0m\n\u001b[0m             rand::rngs::thread::ThreadRng\u001b[0m\n\u001b[0m             rand_chacha::chacha::ChaCha12Core\u001b[0m\n\u001b[0m             rand_chacha::chacha::ChaCha12Rng\u001b[0m\n\u001b[0m             rand_chacha::chacha::ChaCha20Core\u001b[0m\n\u001b[0m           and 5 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `prove`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/revanthgundala/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-snark-0.4.0/src/lib.rs:48:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn prove<C: ConstraintSynthesizer<F>, R: RngCore + CryptoRng>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `SNARK::prove`\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
